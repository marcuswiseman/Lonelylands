//------------------------------------------------------------------------------------------------
// WIDTHS
//------------------------------------------------------------------------------------------------

/*
Utility classes to provide fluid widths to any element they're applied to. Most commonly used in
conjunction with the grid system object 'o-layout', but can be used with anything.
*/

/*
<div class="o-layout__item u-1/2">CONTENT</div>
*/

// DEFINE SETS
//------------------------------------------------------------------------------------------------

/*
A comma seperated list of width-set utility class you wish to generate. By default, only a set of 12 are
generated for use with the grid system, but you can generate as many as you require.

For example: .u-1/2, .u-3/12, u-2/5 etc...
*/

$width-sets: 12 !default;

// WIDTHS MIXIN
//------------------------------------------------------------------------------------------------

@mixin create-widths($width-sets, $breakpoint-suffix: null) {
	@each $denominator in $width-sets {
		@for $numerator from 1 through $denominator {
			/*
			[1] Reset margin-left to disabled any previous offsets
			*/
			.u-#{$numerator}\/#{$denominator}#{$breakpoint-suffix} {
				width: ($numerator / $denominator) * 100% !important;
				margin-left: 0 !important; /* [1] */
			}
		}
	}
}

// OFFSETS MIXIN
//------------------------------------------------------------------------------------------------

@mixin create-offsets($width-sets, $breakpoint-suffix: null) {
	@each $denominator in $width-sets {
		@for $numerator from 1 through $denominator {
			.u-offset-#{$numerator}\/#{$denominator}#{$breakpoint-suffix} {
				margin-left: ($numerator / $denominator) * 100% !important;
			}
		}
	}
}

// GENERATE STANDARD WIDTHS
//------------------------------------------------------------------------------------------------

// Example: .u-1/3
@include create-widths($width-sets);
// Example: .u-offset-1/3
@include create-offsets($width-sets);

// GENERATE RESPONSIVE WIDTHS
//------------------------------------------------------------------------------------------------

// Create responsive variants using settings.breakpoints
// Changes width when breakpoint is hit
// Example: .u-1/3@md

@each $bp-name, $bp-value in $mq-breakpoints {
	@include mq(#{$bp-name}) {
		@include create-widths($width-sets, \@#{$bp-name});
		@include create-offsets($width-sets, \@#{$bp-name});
	}
}

// Changes width until breakpoint is hit
// Example: .u-1/3@max-md
@each $bp-name, $bp-value in $mq-breakpoints {
	@include mq($until: #{$bp-name}) {
		@include create-widths($width-sets, \@max-#{$bp-name});
		@include create-offsets($width-sets, \@max-#{$bp-name});
	}
}

// MISC WIDTH CLASSES
//------------------------------------------------------------------------------------------------

.u-full-width {
	width: 100% !important;
	max-width: 100% !important;
}

// Breaks out of containers width to go full width of the viewport
.u-breakout {
	width: 100vw !important;
	position: relative !important;
	left: 50% !important;
	right: 50% !important;
	margin-left: -50vw !important;
	margin-right: -50vw !important;
}

// Breaks out of containers width until breakpoint is hit
// Example: u-breakout@max-md
@each $bp-name, $bp-value in $mq-breakpoints {
	@include mq($until: #{$bp-name}) {
		.u-breakout\@max-#{$bp-name} {
			width: 100vw !important;
			position: relative !important;
			left: 50% !important;
			right: 50% !important;
			margin-left: -50vw !important;
			margin-right: -50vw !important;
		}
	}
}
